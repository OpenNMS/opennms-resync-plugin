version: 2.1

executors:
  build-executor:
    docker:
      - image: cimg/openjdk:17.0
        environment:
          MAVEN_OPTS: -Xmx1g

orbs:
  cloudsmith: cloudsmith/cloudsmith@1.0.5
  sign-packages: opennms/sign-packages@2.3.0
  branch-management: opennms/branch-management@2.3.0


commands:
  shallow-clone:
      description: "Quick shallow checkout (if possible)"
      steps:
        - run:
            name: git clone
            command: |
              install -d -m 700 ~/.ssh
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
              chmod 600 ~/.ssh/known_hosts
              git clone --no-checkout --filter=tree:0 "${CIRCLE_REPOSITORY_URL}" .
              if [ -n "${CIRCLE_TAG}" ]; then
                git checkout --force "${CIRCLE_TAG}"
                git reset --hard "${CIRCLE_SHA1}"
              else
                git checkout --force -B "${CIRCLE_BRANCH}" "${CIRCLE_SHA1}"
              fi
  clone-opennms:
      description: "Clone Opennms"
      steps:
        - run:
            name: git clone
            command: |
              git clone  "https://github.com/OpenNMS/opennms.git" ~/opennms
              cd ~/opennms
              git checkout opennms-33.0.10-1
              cd -
              #if [ -n "${CIRCLE_TAG}" ]; then
              #  git checkout --force "${CIRCLE_TAG}"
              #  git reset --hard "${CIRCLE_SHA1}"
              #else
              #  git checkout --force -B "${CIRCLE_BRANCH}" "${CIRCLE_SHA1}"
              #fi
  build:
    description: "Build Resync Plugin"
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile OpenNMS, ReSync without tests
          command: |
            sudo apt update && sudo apt install -y npm
            cd ~/opennms
            #ulimit -n 1048576
            export MAVEN_OPTS="-Xmx8g -XX:ReservedCodeCacheSize=1g -XX:+TieredCompilation"
            ./maven/bin/mvn -DskipITs=true -DskipTests=true -Dbuild.skip.tarball=true  install
            #mvn -DskipTests=true -Dbuild.skip.tarball=true -DskipITs=true  -pl :org.opennms.features.collection,:org.opennms.core.snmp.api,:org.opennms.core.ipc.rpc.utils,:org.opennms.core.ipc.rpc.xml,:org.opennms.core,:org.opennms.core.api,:org.opennms.features.collection.api,:org.opennms.features.kafka.producer,:org.opennms.container -am install
            cd -
            echo "Building RESYNC" 
            mvn -DskipITs=true -DskipTests=true clean install
            mkdir ~/output
            find ~/project -type f -regex ".*.kar" -exec cp {} ~/output \;
      - store_artifacts:
          path: ~/output
          destination: artifact-file

workflows:
  build-deploy:
    jobs:
      - build:
          context:
            - gpg-signing
          filters:
            tags:
              only:
                - /^v.*/
      - tests:
          requires:
            - build
          filters:
            tags:
              only:
                - /^v.*/
      - publish-cloudsmith:
          context: 
            - cloudsmith-publish-account
          requires:
            - tests
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore: /.*/
      #- publish-github-release:
      #    context: 
      #      - github-releases
      #    requires:
      #      - tests
      #    filters:
      #      tags:
      #        only:
      #          - /^v.*/
      #      branches:
      #        ignore: /.*/     
      - merge:
          requires:
            - tests
          filters:
            branches:
              only:
               - /^release-.*/


jobs:
  build:
    executor: build-executor
    resource_class: xlarge
    steps:
      - shallow-clone
      - clone-opennms
      - run:
          name: Check releasability
          command: |
            curl -L -O https://raw.githubusercontent.com/OpenNMS/opennms-repo/master/script/release-lint.sh
            chmod 755 release-lint.sh
            if [ -z "${CIRCLE_TAG}" ]; then
              ./release-lint.sh -w
            else
              ./release-lint.sh
            fi
      - build
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - .m2
            - project
            - output

  tests:
    executor: build-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run integration tests
          command: |
            mvn -DskipITs=false -DskipTests=false install test integration-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  prepare-release:
    executor: build-executor
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Gather artifacts
          command: |
              mkdir ~/output
              # We need a better logic here
              find ~/project -type f -regex ".*.kar" -exec cp {} ~/output \;
      - persist_to_workspace:
          root: ~/
          paths:
            - output

  publish-cloudsmith:
    executor: build-executor
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/
      - cloudsmith/ensure-api-key
      - cloudsmith/install-cli
      - run:
          name: Install GitHub CLI and Publish release on GitHub
          command: |
            sudo apt install -y python3 python3-pip python3-venv
            cd /tmp
            python3 -m venv venv
            export PATH=/tmp/venv/bin:$PATH
            /tmp/venv/bin/pip3 install cloudsmith-cli
             
            cloudsmith push raw \
              "opennms/opennms-resync-plugin" "~/output/opennms-resync-plugin-*.kar"
              --verbose --no-wait-for-sync --republish --error-retry-max 3 \
              --version "${CIRCLE_TAG}"

  #publish-github-release:
  #  executor: build-executor
  #  working_directory: ~/project
  #  steps:
  #    - attach_workspace:
  #        at: ~/
  #    - run:
  #        name: Install GitHub CLI and Publish release on GitHub
  #        command: |
  #          if [ -z "${CIRCLE_TAG}" ]; then 
  #            echo "Skipping step as we don't have a tag!"
  #          else 
  #            tag=${CIRCLE_TAG}
  #            # Install GitHub CLI
  #            type -p curl >/dev/null || sudo apt install curl -y
  #            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
  #            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
  #            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
  #            && sudo apt update \
  #            && sudo apt install gh -y
  #            
  #            gh release create $tag --title "$tag Release" --notes "$tag prerelease!" --prerelease --generate-notes 
  #            gh release upload $tag ~/output/*.kar
  #          fi

  merge:
    executor: build-executor
    environment:
      MAVEN_OPTS: -Xmx1024m

    steps:
      - shallow-clone
      - branch-management/merge-branch:
          committer_email: "cicd-system@opennms.com"
          committer_name: "CI/CD System"
          from: release-1.x
          to: main

      # make sure the build passes after merge
      #- build

      - run:
          name: "Push to Main"
          command: git push --no-verify origin main:main


